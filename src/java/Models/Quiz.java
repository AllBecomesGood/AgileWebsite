package Models;

import Beans.Question;
import Beans.QuizDetails;
import Util.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.UUID;

import java.sql.CallableStatement;

public class Quiz {
    //Cluster cluster;
    
    /**
     * @ param  the ID of the Quiz selected
     * @ return the details of the Quiz
     */
    public QuizDetails getQuiz(int quizID) {
        QuizDetails quizDetails = new QuizDetails();

        Connection con;
        Statement statement = null;
        ResultSet quizRS = null;
        ResultSet questionRS = null;
        ResultSet answerRS = null;

        String title = "";

        try {
            con = DBConnection.createConnection(); //establishing connection
            statement = con.createStatement();
            quizRS = statement.executeQuery("select Available, Title, CreationDate from quiz where ID=" + quizID);

            while (quizRS.next()) {
                title = quizRS.getString("Title");
                quizDetails.setTitle(title);
                quizDetails.setAvailability(quizRS.getBoolean("Available"));
                quizDetails.setDate(quizRS.getDate("CreationDate").toString());
            }

            statement = con.createStatement();
            questionRS = statement.executeQuery("select QuestionText, ExplanationText, Valid, QuestionNumber from question where QuizID = " + quizID);

            ArrayList<Question> questions = new ArrayList<Question>();

            while (questionRS.next()) // Until next row is present otherwise it return false
            {
                Question q = new Question();

                q.setQuestionText(questionRS.getString("QuestionText"));
                q.setExplanation(questionRS.getString("ExplanationText"));

                int questionNumber = questionRS.getInt("QuestionNumber");
                statement = con.createStatement();
                answerRS = statement.executeQuery("select AnswerText, Correct from answer where QuestionID = " + questionNumber);

                int c = 0;
                String[] answers = new String[4];
                while (answerRS.next() && c<4) {
                    boolean correct = answerRS.getBoolean("Correct");
                    if (correct) {
                        q.setCorrectAnswerID(c);
                    }
                    answers[c] = answerRS.getString("AnswerText");
                    c++;
                }
                q.setAnswers(answers);
                questions.add(q);
            }

            quizDetails.setQuestions(questions);
            con.close();
            return quizDetails;

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * @ param the initial details of a Quiz
     * @ return the ID generated by the server for the Quiz just created
     */
    public int RegisterQuiz(String title, String moduleID, int available, LocalDate creationDate) {
        Connection con = null;
        ResultSet rs = null;
        int id = 0;

        try {
            con = DBConnection.createConnection(); //establishing connection
            Statement statement = con.createStatement();
            PreparedStatement st;
            
            st = con.prepareStatement("Insert into quiz (Available, Title, CreationDate, moduleID) values (?,?,?,?)");
            //set each value of the query with the value of a variable
            st.setInt(1, available);
            st.setString(2, title);
            java.sql.Date dat = java.sql.Date.valueOf(creationDate);
            st.setDate(3, dat);
            st.setString(4, moduleID);
            st.executeUpdate();
            st.clearParameters();

            rs = statement.executeQuery("Select ID from quiz where Title = '" + title + "' AND moduleID = " + moduleID + " AND CreationDate = '" + creationDate+"'");
                  
            while (rs.next()) // Until next row is present otherwise it returns false
            {
                //get quiz id value
                id = rs.getInt("ID");
                System.out.println("Current Quiz id: " + id);
            }
            con.close();        
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        }
        return id;
    }
    
    /**
     * @ param the details of a Question
     * @ return the ID generated by the server for the Question just created
     */
    public int SubmitQuestion(String questionText, String explanationText, int quizID, int questionNumber) {
        Connection con = null;
        ResultSet rs = null;
        int id = 0;
               
        try {
            con = DBConnection.createConnection(); //establishing connection
            Statement statement = con.createStatement();    
            PreparedStatement st;
            
            st = con.prepareStatement("{call insertQuestion (?,?,?,?)}");        
            //set each value of the stored procedure with the value of a variable
            st.setString(1, questionText);
            st.setString(2, explanationText);
            st.setInt(3, quizID);
            st.setInt(4, questionNumber);
            st.executeUpdate();
            st.clearParameters();
            
            rs = statement.executeQuery("Select ID from question where QuizID = " + quizID + " AND QuestionNumber = " + questionNumber);

            while (rs.next()) // Until next row is present otherwise it returns false
            {
                //get question id value
                id = rs.getInt("ID");
                System.out.println("Current Question id: "+id);
            }     
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        }
        return id;
    }
    
    /**
     * @ param the details of an Answer
     * @ return the ID generated by the server for the Answer just created
     */
    public int SubmitAnswer(String answerText, int correct, int questionNumber) {
        Connection con = null;
        int id = 0;

        try {
            con = DBConnection.createConnection(); //establishing connection 
            PreparedStatement st;
            
            st = con.prepareStatement("Insert into answer (AnswerText, Correct, QuestionID) values (?,?,?)");
            //set each value of the query with the value of a variable
            st.setString(1, answerText);
            st.setInt(2, correct);
            st.setInt(3, questionNumber);
            st.executeUpdate();
            st.clearParameters();
            
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        } 
        return id;
    }
    
    public int EditQuiz(int quizID) {
        QuizDetails qDetails = new QuizDetails();
        //Question questions = new Question();
        int id = 0;
        Connection con = null;
        Statement statement2 = null; //this is what
        ResultSet QuizRS = null;
        ResultSet QuestionRS = null;
        ResultSet AnswerRS = null;
        String title = " ";

        try {
            //establishing connection to db
            con = DBConnection.createConnection();
            Statement statement = con.createStatement();

            QuizRS = statement.executeQuery("Update quiz (Available, Title) values ('available', 'title')");
            QuestionRS = statement.executeQuery("Update question (questiontext, explanationtext) values ('questiontext', 'explanationtext')");
            AnswerRS = statement.executeQuery("Update answer (answertext, correct) values ('answertext', 'correct')");

            while (QuizRS.next()) {
                title = QuizRS.getString("Title");
                qDetails.setTitle(title);
                qDetails.setAvailability(QuizRS.getBoolean("Available"));
            }
            
            ArrayList<Question> question = new ArrayList<Question>();
            while (QuestionRS.next())
            {
                Question questions = new Question();
                questions.setQuestionText(QuestionRS.getString("QuestionText"));
                questions.setExplanation(QuestionRS.getString("ExplanationText"));
             
                int c = 0;
            String[] answer = new String[4];
            while (AnswerRS.next())
            {
                boolean correct = AnswerRS.getBoolean("Correct");
                if (correct)
                {
                    questions.setCorrectAnswerID(c);
                }
                questions.setAnswers(answer);
                question.add(questions);    
            }
            }
            
        } catch (SQLException e) {
            System.out.println("Error");
            e.printStackTrace();
            return -1;
        }
        return id;
    }
}
