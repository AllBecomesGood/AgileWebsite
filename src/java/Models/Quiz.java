package Models;

import Beans.Answer;
import Beans.Question;
import Beans.QuizDetails;
import Beans.QuizResults;
import Util.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.UUID;

import java.sql.CallableStatement;

public class Quiz {
    //Cluster cluster;

    /**
     * @ param the quizID of the Quiz selected
     * @ return the details of the Quiz
     */
    public QuizDetails getQuiz(int quizID) {
        QuizDetails quizDetails = new QuizDetails();

        Connection con;
        Statement statement = null;
        ResultSet quizRS = null;
        ResultSet questionRS = null;
        ResultSet answerRS = null;

        String title = "";

        try {
            con = DBConnection.createConnection(); //establishing connection
            //creating first statement to get basic info about the quiz
            statement = con.createStatement();
            quizRS = statement.executeQuery("select Available, Title, CreationDate from quiz where ID=" + quizID);

            while (quizRS.next()) {
                title = quizRS.getString("Title");
                quizDetails.setTitle(title);
                quizDetails.setAvailability(quizRS.getBoolean("Available"));
                quizDetails.setDate(quizRS.getDate("CreationDate").toString());
            }
            
            //creating another statement to get all quiz questions 
            statement = con.createStatement();
            Statement statement1 = con.createStatement();
            questionRS = statement.executeQuery("select ID,QuestionText, ExplanationText, Valid, QuestionNumber from question where QuizID = " + quizID);

            ArrayList<Question> questions = new ArrayList<>();

           //iterate through every question and get detailed information
            while (questionRS.next()) 
            {
                Question q = new Question();
                q.setQuestionID(questionRS.getInt("ID"));
                q.setQuestionText(questionRS.getString("QuestionText"));
                q.setExplanation(questionRS.getString("ExplanationText"));

                answerRS = statement1.executeQuery("select ID, AnswerText, Correct from answer where QuestionID = " + questionRS.getInt("ID"));

                int c = 0;
                //Using Array List as both number of answers and the number of correct answers are unspecified
                
                ArrayList<Answer> answers = new ArrayList<>();
                ArrayList<Integer> correctAnswers = new ArrayList<>();


                while (answerRS.next()) {
                    Answer answer = new Answer();
                    answer.setCorrect(answerRS.getInt("Correct"));
                    answer.setID(answerRS.getInt("ID"));
                    answer.setText(answerRS.getString("AnswerText"));
                    answers.add(answer);
                }
                q.setAnswers(answers);
                questions.add(q);
            }

            quizDetails.setQuestions(questions);
            con.close();
            //returned a Bean filled with information about the quiz
            return quizDetails;

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * @ param the initial details of a Quiz
     * @ return the ID generated by the server for the Quiz just created
    */
    public int RegisterQuiz(String title, String moduleID, int available, LocalDate creationDate) {
        Connection con = null;
        ResultSet rs = null;
        int id = 0;

        try {
            con = DBConnection.createConnection(); //establishing connection
            Statement statement = con.createStatement();
            PreparedStatement st;

            st = con.prepareStatement("Insert into quiz (Available, Title, CreationDate, moduleID) values (?,?,?,?)");
            //set each value of the query with the value of a variable
            st.setInt(1, available);
            st.setString(2, title);
            java.sql.Date dat = java.sql.Date.valueOf(creationDate);
            st.setDate(3, dat);
            st.setString(4, moduleID);
            st.executeUpdate();
            st.clearParameters();

            rs = statement.executeQuery("Select ID from quiz where Title = '" + title + "' AND moduleID = " + moduleID + " AND CreationDate = '" + creationDate + "'");

            while (rs.next()) // Until next row is present otherwise it returns false
            {
                //get quiz id value
                id = rs.getInt("ID");
                System.out.println("Current Quiz id: " + id);
            }
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        }
        return id;
    }

    /**
     * @ param the details of a Question
     * @ return the ID generated by the server for the Question just created
     */
    public int SubmitQuestion(String questionText, String explanationText, int quizID, int questionNumber) {
        Connection con = null;
        ResultSet rs = null;
        int id = 0;

        try {
            con = DBConnection.createConnection(); //establishing connection
            Statement statement = con.createStatement();
            PreparedStatement st;

            st = con.prepareStatement("{call insertQuestion (?,?,?,?)}");
            //set each value of the stored procedure with the value of a variable
            st.setString(1, questionText);
            st.setString(2, explanationText);
            st.setInt(3, quizID);
            st.setInt(4, questionNumber);
            st.executeUpdate();
            st.clearParameters();

            rs = statement.executeQuery("Select ID from question where QuizID = " + quizID + " AND QuestionNumber = " + questionNumber);

            while (rs.next()) // Until next row is present otherwise it returns false
            {
                //get question id value
                id = rs.getInt("ID");
                System.out.println("Current Question id: " + id);
            }
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        }
        return id;
    }

    /**
     * @ param the details of an Answer
     * @ return the ID generated by the server for the Answer just created
     */
    public int SubmitAnswer(String answerText, int correct, int questionNumber) {
        Connection con = null;
        int id = 0;

        try {
            con = DBConnection.createConnection(); //establishing connection 
            PreparedStatement st;

            st = con.prepareStatement("Insert into answer (AnswerText, Correct, QuestionID) values (?,?,?)");
            //set each value of the query with the value of a variable
            st.setString(1, answerText);
            st.setInt(2, correct);
            st.setInt(3, questionNumber);
            st.executeUpdate();
            st.clearParameters();

            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        }
        return 1;
    }
 public void EditQuestion(String text, String exp, int ID) {
        Connection con = null;

        try {
            //establishing connection to db
            con = DBConnection.createConnection();

            PreparedStatement statement = con.prepareStatement("UPDATE question SET QuestionText = ?, ExplanationText = ? WHERE ID=?");

            //QuizRS = statement.executeQuery("UPDATE quiz SET Available = ?, Title = ?");
            //QuestionRS = statement.executeQuery("UPDATE question SET questiontext = ?, explanationtext = ?");
            //AnswerRS = statement.executeQuery("UPDATE answer SET answertext = ?, correct = ?");
            statement.setString(1, text);
            statement.setString(2, exp);
            statement.setInt(3, ID);
            statement.executeUpdate();
            statement.close();
            con.close();

        } catch (SQLException e) {
            System.out.println("Error");
            e.printStackTrace();
        }
    }

    
    /**
     * @ param the quizID of the Quiz selected
     * @ return results of the Quiz achieved by all students and statistics based on that
     */



    public void EditAnswer(String text, int ID, int correct) {
        Connection con = null;
        try {
            //establishing connection to db
            con = DBConnection.createConnection();

            PreparedStatement statement = con.prepareStatement("UPDATE answer SET answertext = ?, correct = ? WHERE ID=?");
            statement.setString(1, text);
            statement.setInt(2, correct);
            statement.setInt(3, ID);
            statement.executeUpdate();
            statement.close();
            con.close();

        } catch (SQLException e) {
            System.out.println("Error");
            e.printStackTrace();

        }
    }
    
    public void EditQuiz(boolean availability, String title, int id) {
        Connection con = null; 
        Byte available;
        
        try {
            //establishing connection to db
            con = DBConnection.createConnection();

            PreparedStatement statement = con.prepareStatement("UPDATE quiz SET title = ?, available = ? WHERE ID=?");
            statement.setString(1, title);
            if(availability) available = 1;
            else available = 0;
            statement.setByte(2,available);
            statement.setInt(3, id);
            statement.executeUpdate();
            statement.close();
            con.close();

        } catch (SQLException e) {
            System.out.println("Error");
            e.printStackTrace();

        }

}

    public QuizResults getQuizResults(int quizID) {

        QuizResults quizResults = new QuizResults();

        ArrayList<Integer> scores = new ArrayList<>();
        ArrayList<String> surnames = new ArrayList<>();
        ArrayList<String> firstnames = new ArrayList<>();
        ArrayList<String> matricNum = new ArrayList<>();
        ArrayList<Integer> attempts = new ArrayList<>();
        ArrayList<String> dates = new ArrayList<>();

        Connection con;
        Statement statement = null;
        ResultSet quizRS = null;
        ResultSet userRS = null;
        ResultSet stats = null;

        try {
            con = DBConnection.createConnection(); //establishing connection
            statement = con.createStatement();
            quizRS = statement.executeQuery("select Attempts, userID, Score, date from completed_quiz where quizID=" + quizID);

            while (quizRS.next()) {
                scores.add(quizRS.getInt("Score"));
                attempts.add(quizRS.getInt("Attempts"));
                matricNum.add(quizRS.getString("userID"));
                dates.add(quizRS.getString("date"));

                statement = con.createStatement();
                userRS = statement.executeQuery("select First_Name, Last_Name from user where ID = " + quizRS.getString("userID"));

                //there will be one user anyway, but while loop is needed for it to work
                while (userRS.next()) {
                    surnames.add(userRS.getString("First_Name"));
                    firstnames.add(userRS.getString("Last_Name"));
                }
            }
            statement = con.createStatement();
            //get average, minimum and maximum score of the quiz 
            stats = statement.executeQuery("select avg(Score) as scoreAvg, max(Score) as scoreMax, min(Score) as scoreMin from completed_quiz where quizID=" + quizID);

            while (stats.next()) {
                quizResults.setAverage(stats.getDouble("scoreAvg"));
                quizResults.setMaxi(stats.getInt("scoreMin"));
                quizResults.setMini(stats.getInt("scoreMax"));
            }

            quizResults.setAttempts(attempts);
            quizResults.setFirstnames(firstnames);
            quizResults.setMatricNum(matricNum);
            quizResults.setSurnames(surnames);
            quizResults.setScores(scores);
            quizResults.setDates(dates);

            con.close();
            return quizResults;

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }

    }
    /**
     * @ param the quizID of the Quiz selected
     * @ return results of the Quiz achieved by students who take the module that the quiz is assigned to and statistics based on that
     */
    public QuizResults getRelevantQuizResults(int quizID) {
        QuizResults quizResults = new QuizResults();

        ArrayList<Integer> scores = new ArrayList<>();
        ArrayList<String> surnames = new ArrayList<>();
        ArrayList<String> firstnames = new ArrayList<>();
        ArrayList<String> matricNum = new ArrayList<>();
        ArrayList<Integer> attempts = new ArrayList<>();
        ArrayList<String> dates = new ArrayList<>();

        Connection con;
        Statement statement = null;
        ResultSet quizRS = null;
        ResultSet userRS = null;
        ResultSet stats = null;
        ResultSet modules = null;

        try {
            con = DBConnection.createConnection(); //establishing connection
            statement = con.createStatement();
            modules = statement.executeQuery("select moduleID from quiz where ID=" + quizID);
            int modID = 0;

            while (modules.next()) {
                modID = modules.getInt("moduleID");
            }

            //there is a number of variables that need to be used in the query that is why prepared statement is used
            String sql = "select Attempts, userID, Score, date from completed_quiz where quizID=? AND userID IN (Select studentID from student_modules where moduleID=?)";
            PreparedStatement pstmt = con.prepareStatement(sql);
            //set quiz ID
            pstmt.setInt(1,quizID);
            
            //set module ID
            pstmt.setInt(2,modID);
            
            quizRS = pstmt.executeQuery();
            
            while (quizRS.next()) {
                scores.add(quizRS.getInt("Score"));
                attempts.add(quizRS.getInt("Attempts"));
                matricNum.add(quizRS.getString("userID"));
                dates.add(quizRS.getString("date"));

                statement = con.createStatement();
                userRS = statement.executeQuery("select First_Name, Last_Name from user where ID = " + quizRS.getString("userID"));

                //there will be one user anyway, but while loop is needed for it to work
                while (userRS.next()) {
                    firstnames.add(userRS.getString("First_Name"));
                    surnames.add(userRS.getString("Last_Name"));
                }
            }
            
            //get average, minimum and maximum score of the quiz for relevant students
            String sql2 = "select avg(Score) as scoreAvg, max(Score) as scoreMax, min(Score) as scoreMin from completed_quiz where quizID=? AND userID IN (Select studentID from student_modules where moduleID=?)";
            PreparedStatement pstmt2 = con.prepareStatement(sql2);
            //set quiz ID
            pstmt2.setInt(1,quizID);
            
            //set module ID
            pstmt2.setInt(2,modID);
            stats = pstmt2.executeQuery();
            
            while (stats.next()) {
                quizResults.setAverage(stats.getDouble("scoreAvg"));
                quizResults.setMini(stats.getInt("scoreMin"));
                quizResults.setMaxi(stats.getInt("scoreMax"));
            }

            quizResults.setAttempts(attempts);
            quizResults.setFirstnames(firstnames);
            quizResults.setMatricNum(matricNum);
            quizResults.setSurnames(surnames);
            quizResults.setScores(scores);
            quizResults.setDates(dates);

            con.close();
            return quizResults;

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }

    }
}
